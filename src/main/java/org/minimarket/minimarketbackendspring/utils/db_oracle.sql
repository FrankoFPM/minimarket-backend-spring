CREATE TABLE departamento (
                              id_departamento NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                              nombre          VARCHAR2(100)                             NOT NULL,
                              descripcion     CLOB,
                              estado          VARCHAR2(10)             DEFAULT 'activo' NOT NULL CHECK (estado IN ('activo', 'inactivo')),
                              created_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                              updated_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                              created_by      VARCHAR2(36),
                              update_by       VARCHAR2(36)
);

CREATE OR REPLACE TRIGGER trg_departamento_update
    BEFORE UPDATE ON departamento
                      FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE TABLE distrito (
                          id_distrito     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          nombre          VARCHAR2(100)                             NOT NULL,
                          descripcion     CLOB,
                          id_departamento NUMBER                                    NOT NULL,
                          estado          VARCHAR2(10)             DEFAULT 'activo' NOT NULL CHECK (estado IN ('activo', 'inactivo')),
                          created_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                          updated_at      TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                          created_by      VARCHAR2(36),
                          update_by       VARCHAR2(36)
);

CREATE OR REPLACE TRIGGER trg_distrito_update
    BEFORE UPDATE ON distrito
                      FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE TABLE usuarios (
                          id_usuario  VARCHAR2(36)             DEFAULT SYS_GUID() PRIMARY KEY,
                          nombre      VARCHAR2(50)                               NOT NULL,
                          apellido    VARCHAR2(50)                               NOT NULL,
                          email       VARCHAR2(100)                              NOT NULL UNIQUE,
                          clave       VARCHAR2(255),
                          telefono    VARCHAR2(9),
                          id_distrito NUMBER,
                          direccion   VARCHAR2(100),
                          google_id   VARCHAR2(50),
                          facebook_id VARCHAR2(50),
                          rol         VARCHAR2(20)             DEFAULT 'cliente' NOT NULL CHECK (rol IN ('admin', 'cliente', 'almacenista', 'recepcion')),
                          estado      VARCHAR2(10)             DEFAULT 'activo'  NOT NULL CHECK (estado IN ('activo', 'inactivo')),
                          created_at  TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                          updated_at  TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                          created_by  VARCHAR2(36),
                          update_by   VARCHAR2(36)
);

CREATE OR REPLACE TRIGGER trg_usuarios_update
    BEFORE UPDATE ON usuarios
                      FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

ALTER TABLE distrito
    ADD CONSTRAINT fk_departamento FOREIGN KEY (id_departamento) REFERENCES departamento (id_departamento) ON DELETE CASCADE;

ALTER TABLE distrito
    ADD CONSTRAINT fk_created_by_distrito FOREIGN KEY (created_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE departamento
    ADD CONSTRAINT fk_created_by_departamento FOREIGN KEY (created_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE departamento
    ADD CONSTRAINT fk_updated_by_departamento FOREIGN KEY (update_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE distrito
    ADD CONSTRAINT fk_updated_by_distrito FOREIGN KEY (update_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE usuarios
    ADD CONSTRAINT fk_distrito FOREIGN KEY (id_distrito) REFERENCES distrito (id_distrito) ON DELETE SET NULL;

ALTER TABLE usuarios
    ADD CONSTRAINT fk_created_by FOREIGN KEY (created_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE usuarios
    ADD CONSTRAINT fk_updated_by FOREIGN KEY (update_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

CREATE TABLE categoria (
                           id_categoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           nombre       VARCHAR2(100)                             NOT NULL,
                           descripcion  CLOB,
                           estado       VARCHAR2(10)             DEFAULT 'activo' NOT NULL CHECK (estado IN ('activo', 'inactivo')),
                           created_at   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                           updated_at   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                           created_by   VARCHAR2(36),
                           update_by    VARCHAR2(36)
);

CREATE OR REPLACE TRIGGER trg_categoria_update
    BEFORE UPDATE ON categoria
                      FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE TABLE proveedor (
                           id_proveedor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           nombre       VARCHAR2(100)                             NOT NULL,
                           contacto     VARCHAR2(100)                             NOT NULL,
                           telefono     VARCHAR2(15),
                           direccion    VARCHAR2(100),
                           email        VARCHAR2(100)                             NOT NULL UNIQUE,
                           estado       VARCHAR2(10)             DEFAULT 'activo' NOT NULL CHECK (estado IN ('activo', 'inactivo')),
                           created_at   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                           updated_at   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                           created_by   VARCHAR2(36),
                           update_by    VARCHAR2(36)
);

CREATE OR REPLACE TRIGGER trg_proveedor_update
    BEFORE UPDATE ON proveedor
                      FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE TABLE productos (
                           id_producto  VARCHAR2(36)             DEFAULT RAWTOHEX(SYS_GUID()) PRIMARY KEY,
                           nombre       VARCHAR2(50)                              NOT NULL,
                           descripcion  CLOB,
                           precio       FLOAT                                     NOT NULL,
                           stock        NUMBER                                    NOT NULL,
                           foto         VARCHAR2(100),
                           id_categoria NUMBER                                    NOT NULL,
                           id_proveedor NUMBER                                    NOT NULL,
                           estado       VARCHAR2(10)             DEFAULT 'activo' NOT NULL CHECK (estado IN ('activo', 'inactivo')),
                           created_at   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                           updated_at   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                           created_by   VARCHAR2(36),
                           update_by    VARCHAR2(36)
);

CREATE OR REPLACE TRIGGER trg_productos_update
    BEFORE UPDATE ON productos
                      FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

ALTER TABLE categoria
    ADD CONSTRAINT fk_created_by_categoria FOREIGN KEY (created_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE categoria
    ADD CONSTRAINT fk_updated_by_categoria FOREIGN KEY (update_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE proveedor
    ADD CONSTRAINT fk_created_by_proveedor FOREIGN KEY (created_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE proveedor
    ADD CONSTRAINT fk_updated_by_proveedor FOREIGN KEY (update_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE productos
    ADD CONSTRAINT fk_categoria FOREIGN KEY (id_categoria) REFERENCES categoria (id_categoria) ON DELETE SET NULL;

ALTER TABLE productos
    ADD CONSTRAINT fk_proveedor FOREIGN KEY (id_proveedor) REFERENCES proveedor (id_proveedor) ON DELETE SET NULL;

ALTER TABLE productos
    ADD CONSTRAINT fk_created_by_productos FOREIGN KEY (created_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

ALTER TABLE productos
    ADD CONSTRAINT fk_updated_by_productos FOREIGN KEY (update_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL;

CREATE TABLE pedido (
                        id_pedido          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        id_usuario         VARCHAR2(36),
                        fecha_pedido       TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        estado             VARCHAR2(20) DEFAULT 'solicitado' CHECK (estado IN ('solicitado', 'pendiente_pago', 'pagado', 'completado', 'cancelado')),
                        metodo_pago        VARCHAR2(20) DEFAULT 'contraentrega' CHECK (metodo_pago IN ('contraentrega', 'efectivo', 'tarjeta', 'billetera')),
                        total              NUMBER(10, 2) DEFAULT 0,
                        descuento_aplicado NUMBER(10, 2) DEFAULT 0,
                        impuesto           NUMBER(10, 2) DEFAULT 0,
                        created_by         VARCHAR2(36),
                        updated_by         VARCHAR2(36),
                        created_at         TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        updated_at         TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

                        FOREIGN KEY (id_usuario) REFERENCES usuarios (id_usuario) ON DELETE SET NULL,
                        FOREIGN KEY (created_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL,
                        FOREIGN KEY (updated_by) REFERENCES usuarios (id_usuario) ON DELETE SET NULL
);

CREATE TABLE descuento_promocion (
                                     id_descuento NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     id_producto  VARCHAR2(36) NOT NULL,
                                     descripcion  VARCHAR2(100),
                                     porcentaje   NUMBER(5, 2),
                                     fecha_inicio DATE,
                                     fecha_fin    DATE,
                                     estado       VARCHAR2(10) DEFAULT 'activo',

                                     CHECK (fecha_fin IS NULL OR fecha_fin >= fecha_inicio),
                                     FOREIGN KEY (id_producto) REFERENCES productos (id_producto)
);

CREATE TABLE detalle_pedido (
                                id_detalle      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                id_pedido       NUMBER       NOT NULL,
                                id_producto     VARCHAR2(36) NOT NULL,
                                cantidad        NUMBER       NOT NULL,
                                precio_unitario NUMBER(10, 2),
                                subtotal        NUMBER(10, 2),
                                id_descuento    NUMBER,

                                FOREIGN KEY (id_pedido) REFERENCES pedido (id_pedido) ON DELETE CASCADE,
                                FOREIGN KEY (id_producto) REFERENCES productos (id_producto),
                                FOREIGN KEY (id_descuento) REFERENCES descuento_promocion (id_descuento) ON DELETE SET NULL
);

CREATE OR REPLACE TRIGGER trg_calc_subtotal
    BEFORE INSERT OR UPDATE ON detalle_pedido
                                FOR EACH ROW
BEGIN
    :NEW.subtotal := :NEW.cantidad * :NEW.precio_unitario;
END;
/

CREATE TABLE comprobante (
                             id_comprobante NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                             id_pedido      NUMBER NOT NULL UNIQUE,
                             tipo           VARCHAR2(20) DEFAULT 'boleta' CHECK (tipo IN ('boleta', 'factura')),
                             fecha          TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                             monto_total    NUMBER(10, 2),

                             FOREIGN KEY (id_pedido) REFERENCES pedido (id_pedido)
);

CREATE TABLE carrito_temporal (
                                  id_carrito     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                  id_usuario     VARCHAR2(36),
                                  id_producto    VARCHAR2(36) NOT NULL,
                                  cantidad       NUMBER       NOT NULL,
                                  fecha_agregado TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

                                  FOREIGN KEY (id_producto) REFERENCES productos (id_producto),
                                  FOREIGN KEY (id_usuario) REFERENCES usuarios (id_usuario) ON DELETE SET NULL
);

CREATE INDEX idx_carrito_usuario ON carrito_temporal (id_usuario);